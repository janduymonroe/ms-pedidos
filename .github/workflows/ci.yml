name: Pedidos CI

on:
  pull_request:
    branches:
      - main
    paths:
      - '**.cs'
      - '**.csproj'

jobs:
  build:
    runs-on: ubuntu-latest
    env: 
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Build and Test
      id: test
      run: |
        dotnet restore
        dotnet build --configuration Release
        coverage=$(dotnet test --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover | grep 'Total line coverage' | cut -d ' ' -f4 | sed 's/%//')
        echo "::set-output name=coverage::$coverage"

    - name: Check Code Coverage
      run: |
        coverage=${{ steps.test.outputs.coverage }}
        if (( $(echo "$coverage >= 80" | bc -l) )); then
          echo "Code coverage is greater than or equal to 80%."
        else
          echo "Code coverage is less than 80%."
          exit 1
        fi

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: lanchonete-da-rua-pedidos
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t ${ECR_REPOSITORY}:latest .
        docker tag ${ECR_REPOSITORY}:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}
        docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: pedidos
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: pedido-service
        cluster: lanchonete-da-rua-app
        wait-for-service-stability: true